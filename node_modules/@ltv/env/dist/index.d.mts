type EnvFunc = <T = unknown>(key: string, defaultValue?: T) => T;
type StringOrUndefined<T extends undefined | string> = T extends string ? string : undefined;
type NumberOrUndefined<T extends undefined | number> = T extends number ? number : undefined;
type BooleanOrUndefined<T extends undefined | boolean> = T extends boolean ? boolean : undefined;
type DateOrUndefined<T extends undefined | Date> = T extends Date ? Date : undefined;
type ArrayOfStringOrUndefined<T extends undefined | string[]> = T extends string[] ? string[] : undefined;
type CustomOrUndefined<T extends undefined | object> = T extends object ? T : undefined;
declare const _default: EnvFunc & {
    /**
     * Get string from environment
     *
     * @param key string
     * @param defaultValue string
     * @returns string
     */
    string<R extends undefined | string>(key: string, defaultValue?: R): StringOrUndefined<R>;
    /**
     * Get integer from environment
     *
     * @param key string
     * @param defaultValue integer number
     * @returns integer number
     */
    int<R extends undefined | number>(key: string, defaultValue?: R): NumberOrUndefined<R>;
    /**
     * Get float from environment
     *
     * @param key string
     * @param defaultValue float number
     * @returns float number
     */
    float<R extends undefined | number>(key: string, defaultValue?: R): NumberOrUndefined<R>;
    /**
     * Get boolean from environment
     *
     * @param key string
     * @param defaultValue boolean
     * @returns boolean
     */
    bool<R extends undefined | boolean>(key: string, defaultValue?: R): BooleanOrUndefined<R>;
    /**
     * Get number from environment
     *
     * @param key string
     * @param defaultValue number
     * @returns number
     */
    number<R extends undefined | number>(key: string, defaultValue?: R): NumberOrUndefined<R>;
    /**
     * Get JSON object from environment
     *
     * @param key string
     * @param defaultValue string
     * @returns object
     */
    json<T extends undefined | object>(key: string, defaultValue?: T): CustomOrUndefined<T>;
    /**
     * Get string array from environment
     *
     * @param key string
     * @param defaultValue string[]
     * @returns string[]
     */
    array<R extends undefined | string[]>(key: string, defaultValue?: R): ArrayOfStringOrUndefined<R>;
    /**
     * Get Date object from environment
     *
     * @param key string
     * @param defaultValue Date
     * @returns Date
     */
    date<R extends undefined | Date>(key: string, defaultValue?: R): DateOrUndefined<R>;
};

export { _default as default };
